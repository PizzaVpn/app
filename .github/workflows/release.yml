name: Create Release Assets

on:
  push:
    branches:
      - master
jobs:
  build-release-assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is a broader permission that also allows writing to releases
      # A more specific alternative is:
      # releases: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step to handle the Windows release files.
      # Zipping is a good approach for multiple files.
      - name: Create Windows zip archive
        run: |
          if [ -d "windows" ]; then
            echo "Creating zip for Windows folder..."
            zip -r "windows.zip" "windows"
          else
            echo "Windows directory not found, skipping."
          fi

      # Upload the Windows zip file using github-script for consistency
      - name: Upload Windows zip file
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const releaseId = context.payload.release.id;
            const filePath = 'windows.zip';
            const fileName = 'windows.zip';

            if (fs.existsSync(filePath)) {
              console.log(`Uploading file: ${fileName}`);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fs.readFileSync(filePath),
              });
            } else {
              console.log(`${fileName} not found, skipping upload.`);
            }

      # Find all files in the android directory and upload them individually.
      # This uses a script to find and upload each file in a loop.
      - name: Upload individual Android files
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const androidDir = 'android';
            const releaseId = context.payload.release.id;

            if (fs.existsSync(androidDir)) {
              console.log(`Uploading individual files from ${androidDir}`);
              const files = fs.readdirSync(androidDir);

              for (const file of files) {
                const filePath = path.join(androidDir, file);
                // Ensure we are only uploading files, not sub-directories
                if (fs.statSync(filePath).isFile()) {
                  console.log(`Uploading file: ${file}`);
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: releaseId,
                    name: file,
                    data: fs.readFileSync(filePath),
                  });
                }
              }
            } else {
              console.log(`Android directory not found, skipping.`);
            }
