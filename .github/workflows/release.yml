# .github/workflows/release.yml
name: Create Release Assets

on:
  push:
    branches:
      - master

jobs:
  build-release-assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This step creates the new release and provides its outputs.
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: V${{ github.run_number }}
          release_name: Release - RN#${{ github.run_number }}
          draft: false
          prerelease: false

      # Step to handle the Windows release files.
      - name: Create Windows zip archive
        run: |
          if [ -d "windows" ]; then
            echo "Creating zip for Windows folder..."
            zip -r "windows.zip" "windows"
          else
            echo "Windows directory not found, skipping."
          fi

      # Upload the Windows zip file using the upload_url output from the create-release step.
      - name: Upload Windows zip file
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Find all files in the android directory and upload them individually.
      # This uses the release_id from the create-release step.
      - name: Upload individual Android files
        uses: actions/github-script@v6
        # Pass the release ID as an environment variable so the script can access it.
        env:
          RELEASE_ID: ${{ steps.create_release.outputs.id }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const releaseId = process.env.RELEASE_ID;

            const androidDir = 'android';

            if (fs.existsSync(androidDir)) {
              console.log(`Uploading individual files from ${androidDir}`);
              const files = fs.readdirSync(androidDir);

              for (const file of files) {
                const filePath = path.join(androidDir, file);
                // Ensure we are only uploading files, not sub-directories
                if (fs.statSync(filePath).isFile()) {
                  console.log(`Uploading file: ${file}`);
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: releaseId,
                    name: file,
                    data: fs.readFileSync(filePath),
                  });
                }
              }
            } else {
              console.log(`Android directory not found, skipping.`);
            }